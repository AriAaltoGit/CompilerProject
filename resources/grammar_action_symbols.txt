Program -> #start Declaration-list #close_scope eof
Declaration-list -> Declaration Declaration-list
Declaration-list -> ε
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> #save_type Type-specifier #create_symbol id
Declaration-prime -> #save_func #set_fun_address Fun-declaration-prime
Declaration-prime -> #set_var_address Var-declaration-prime
Var-declaration-prime -> #inc_var_pointer_default ;
Var-declaration-prime -> [ #inc_var_pointer_array num ] ;
Fun-declaration-prime -> #start_function_scope ( Params ) #save_stack #save_stack Compound-stmt #backpatch_func_skip
Type-specifier -> int
Type-specifier -> void
Params -> #save_type int #create_symbol id #set_var_address #inc_var_pointer_default Param-Prime Param-list
Params -> void Param-list-void-abtar
Param-list-void-abtar -> #void_type_error id Param-prime Param-list
Param-list-void-abtar -> ε
Param-list -> #inc_n_args , Param Param-list
Param-list -> #inc_n_args ε
Param -> Declaration-initial #set_var_address #inc_var_pointer_default Param-prime
Param-prime -> ε
Param-prime -> #set_var_type_refrence [ ]
Compound-stmt -> { Declaration-list Statement-list } #close_scope
Statement-list -> Statement Statement-list
Statement-list -> ε
Statement -> Expression-stmt
Statement -> #start_normal_scope Compound-stmt
Statement -> Selection-stmt
Statement -> #start_iteration_scope Iteration-stmt
Statement -> Return-stmt
Statement -> #start_switch_scope Switch-stmt
Expression-stmt -> Expression ; #pop_stack
Expression-stmt -> continue #jmp_to_beginning;
Expression-stmt -> break #jump_indirect_to_temp
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #save Statement #save #backpatch_if else Statement #backpatch_else
Iteration-stmt -> #save_jump_temp while #label ( Expression ) #save Statement #backpatch_while_condition #close_scope
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> #return_code ;
Return-stmt-prime -> Expression #return_code_expression ;
Switch-stmt -> #save_jump_temp switch ( Expression ) { Case-stmts Default-stmt }
Case-stmts -> Case-stmt Case-stmts
Case-stmts -> ε
Case-stmt -> case num : Statement-list
Default-stmt -> default : Statement-list
Default-stmt -> ε



Expression -> #pid id B
Expression -> Simple-expression-zegond

B -> = Expression #assign
B -> [ Expression #add_to_var ] H
B -> Simple-expression-prime

H -> = Expression #assign
H -> G D C

Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #relop_expressions
C -> ε

Relop -> #push_operation_type ==
Relop -> #push_operation_type <

Addop -> #push_operation_type +
Addop -> #push_operation_type -

Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #add_expressions D
D -> ε

Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * Signed-factor #mult G
G -> ε

Signed-factor -> + Factor
Signed-factor -> - Factor #negate_expression
Signed-factor -> Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor
Signed-factor-zegond -> - Factor #negate_expression
Signed-factor-zegond -> Factor-zegond

Factor -> ( Expression )
Factor -> #save_to_temp num
Factor -> #pid id Var-call-prime

Var-call-prime -> Var-prime
Var-call-prime -> #push_arg_counter #push_temp_vars ( Args #inc_stack_pointer #push_func_stuff #pop_arg_counter #dec_stack_pointer) #poop_temp_vars
Var-prime -> [ Expression #add_to_var ]
Var-prime -> ε

Factor-prime -> #push_arg_counter #push_temp_vars ( Args #inc_stack_pointer #push_func_stuff #pop_arg_counter #dec_stack_pointer) # poop_temp_vars
Factor-prime -> ε


Factor-zegond -> ( Expression )
Factor-zegond -> #save_to_temp num

Args -> Arg-list
Args -> ε
Arg-list ->  Expression Arg-list-prime
Arg-list-prime -> #push_arg , Expression Arg-list-prime
Arg-list-prime -> #push_arg ε